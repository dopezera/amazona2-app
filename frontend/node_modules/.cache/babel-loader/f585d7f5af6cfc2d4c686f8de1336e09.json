{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\nexport const cartReducer = (state = {\n  cartItems: []\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload; //aqui ta o item que quero botar no carrinho\n\n      const existItem = state.cartItems.find(x => x.product === item.product); //existItem guarda o produto se ele já estiver no carrinho\n\n      if (existItem) {\n        //se o item já tá no carrinho\n        return { ...state,\n          //isso diz que nao vou alterar outras propriedades\n          cartItems: state.cartItems.map(x => //eu vou rodar até encontrar o item que o cara solicitou no estado cartItems atual\n          x.product === existItem.product //comparando o id do item que chegou com o id dos itens que ja estao no estado\n          ? item //achei. entao retorno a solicitacao mais recente que esta guardada em \"item\"\n          : x //se eu nao achei entao deixa o que já tava no carrinho antes (nao sei se isso acontece)\n          )\n        };\n      } else {\n        //se num tem no carrinho ainda, adicione.\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/dope/Documents/coding/amazona2/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","cartReducer","state","cartItems","action","type","item","payload","existItem","find","x","product","map","filter","shippingAddress"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAA0CC,0BAA1C,QAA4E,4BAA5E;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA2BC,MAA3B,KAAsC;AAC7D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,aAAL;AACI,YAAMQ,IAAI,GAAGF,MAAM,CAACG,OAApB,CADJ,CACgC;;AAC5B,YAAMC,SAAS,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAlB,CAFJ,CAE6E;;AACzE,UAAGH,SAAH,EAAc;AAAE;AACZ,eAAO,EACH,GAAGN,KADA;AACO;AACVC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAqBF,CAAC,IAAI;AACjCA,UAAAA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,CAAiC;AAAjC,YACEL,IADF,CACQ;AADR,YAEEI,CAHK,CAGD;AAHC;AAFR,SAAP;AAQH,OATD,MASO;AAAE;AACL,eAAO,EAAE,GAAGR,KAAL;AAAYC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB;AAAvB,SAAP;AACH;;AAGL,SAAKP,gBAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,MAAhB,CAAyBH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAApD;AAFR,OAAP;;AAKJ,SAAKP,0BAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHY,QAAAA,eAAe,EAAEV,MAAM,CAACG;AAFrB,OAAP;;AAMJ;AACI,aAAOL,KAAP;AAhCR;AAkCH,CAnCM","sourcesContent":["import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\n\nexport const cartReducer = (state = { cartItems: []}, action) => {\n    switch(action.type){\n        case CART_ADD_ITEM:\n            const item = action.payload //aqui ta o item que quero botar no carrinho\n            const existItem = state.cartItems.find(x => x.product === item.product); //existItem guarda o produto se ele já estiver no carrinho\n            if(existItem) { //se o item já tá no carrinho\n                return {\n                    ...state, //isso diz que nao vou alterar outras propriedades\n                    cartItems: state.cartItems.map( x => //eu vou rodar até encontrar o item que o cara solicitou no estado cartItems atual\n                        x.product === existItem.product  //comparando o id do item que chegou com o id dos itens que ja estao no estado\n                        ? item  //achei. entao retorno a solicitacao mais recente que esta guardada em \"item\"\n                        : x   //se eu nao achei entao deixa o que já tava no carrinho antes (nao sei se isso acontece)\n                        )\n                }\n            } else { //se num tem no carrinho ainda, adicione.\n                return { ...state, cartItems: [...state.cartItems, item]};\n            }\n\n           \n        case CART_REMOVE_ITEM:\n            return { \n                ...state, \n                cartItems: state.cartItems.filter( (x) => x.product !== action.payload),\n            }\n\n        case CART_SAVE_SHIPPING_ADDRESS:\n            return {\n                ...state,\n                shippingAddress: action.payload\n            };\n\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}