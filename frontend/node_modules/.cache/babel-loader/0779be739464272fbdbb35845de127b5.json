{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\";\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await axios.get(`/api/products/${productId}`);\n  dispatch({\n    type: CART_ADD_ITEM,\n    // o que a action diz pra store é \"adicione este produto\" ao carrinho\n    payload: {\n      name: data.name,\n      image: data.image,\n      price: data.price,\n      countInStock: data.countInStock,\n      product: data._id,\n      qty\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems)); //a linha de codigo acima serve pra guardar produtos do carrinho no localstorage de forma que mesmo dando refresh na pagina o estado do carrinho se mantém\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: productId\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};","map":{"version":3,"sources":["/home/dope/Documents/coding/amazona2/frontend/src/actions/cartActions.js"],"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","addToCart","productId","qty","dispatch","getState","data","get","type","payload","name","image","price","countInStock","product","_id","localStorage","setItem","JSON","stringify","cart","cartItems","removeFromCart","saveShippingAddress"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,0BAA1C,QAA4E,4BAA5E;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACtE,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMT,KAAK,CAACU,GAAN,CAAW,iBAAgBL,SAAU,EAArC,CAArB;AACAE,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEV,aADD;AACgB;AACrBW,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IADN;AAELC,MAAAA,KAAK,EAAEL,IAAI,CAACK,KAFP;AAGLC,MAAAA,KAAK,EAAEN,IAAI,CAACM,KAHP;AAILC,MAAAA,YAAY,EAAEP,IAAI,CAACO,YAJd;AAKLC,MAAAA,OAAO,EAAER,IAAI,CAACS,GALT;AAMLZ,MAAAA;AANK;AAFJ,GAAD,CAAR;AAWAa,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC,EAbsE,CActE;AACH,CAfM;AAgBP,OAAO,MAAMC,cAAc,GAAIpB,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAuB;AAChED,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAET,gBADD;AAELU,IAAAA,OAAO,EAAEP;AAFJ,GAAD,CAAR;AAIAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC;AACH,CANM;AAQP,OAAO,MAAME,mBAAmB,GAAIjB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAER,0BAAR;AAAoCS,IAAAA,OAAO,EAAEH;AAA7C,GAAD,CAAR;AACAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAxC;AACH,CAHM","sourcesContent":["import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\"\n\nexport const addToCart = (productId, qty) => async(dispatch, getState) => {\n    const {data} = await axios.get(`/api/products/${productId}`);\n    dispatch({\n        type: CART_ADD_ITEM, // o que a action diz pra store é \"adicione este produto\" ao carrinho\n        payload: {\n            name: data.name,\n            image: data.image,\n            price: data.price,\n            countInStock: data.countInStock,\n            product: data._id,\n            qty,\n        },\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    //a linha de codigo acima serve pra guardar produtos do carrinho no localstorage de forma que mesmo dando refresh na pagina o estado do carrinho se mantém\n};\nexport const removeFromCart = (productId) => (dispatch, getState) =>{\n    dispatch({\n        type: CART_REMOVE_ITEM,\n        payload: productId\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n} \n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    dispatch({ type: CART_SAVE_SHIPPING_ADDRESS, payload: data});\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\n}"]},"metadata":{},"sourceType":"module"}