{"ast":null,"code":"import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/cartReducers';\nimport { productDetailsReducer, productListReducer } from './reducers/productReducers';\nimport { userRegisterReducer, userSigninReducer } from './reducers/userReducer';\nconst initialState = {\n  userSignin: {\n    //em resumo, já verificamos o estado userSignin na largada. se tiver algo em localstorage a gente traz pro estado inicial.\n    userInfo: localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null\n  },\n  cart: {\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  } //isso aqui combinado ao que tá em cartActions é que faz o carrinho ser persistente mesmo com refresh da pagina\n\n};\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userSignin: userSigninReducer,\n  userRegister: userRegisterReducer\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store;","map":{"version":3,"sources":["/home/dope/Documents/coding/amazona2/frontend/src/store.js"],"names":["applyMiddleware","combineReducers","compose","createStore","thunk","cartReducer","productDetailsReducer","productListReducer","userRegisterReducer","userSigninReducer","initialState","userSignin","userInfo","localStorage","getItem","JSON","parse","cart","cartItems","reducer","productList","productDetails","userRegister","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAoDC,WAApD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,4BAA1D;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,wBAAvD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE;AAAE;AACVC,IAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACRC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADQ,GAER;AAHM,GADK;AAMjBG,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAEL,YAAY,CAACC,OAAb,CAAqB,WAArB,IACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADS,GAEV;AAHC,GANW,CAWjB;;AAXiB,CAArB;AAaA,MAAMK,OAAO,GAAGlB,eAAe,CAAC;AAC5BmB,EAAAA,WAAW,EAAEb,kBADe;AAE5Bc,EAAAA,cAAc,EAAEf,qBAFY;AAG5BW,EAAAA,IAAI,EAAEZ,WAHsB;AAI5BM,EAAAA,UAAU,EAAEF,iBAJgB;AAK5Ba,EAAAA,YAAY,EAAEd;AALc,CAAD,CAA/B;AAOA,MAAMe,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CvB,OAAvE;AACA,MAAMwB,KAAK,GAAGvB,WAAW,CACrBgB,OADqB,EAErBT,YAFqB,EAGrBa,eAAe,CAACvB,eAAe,CAACI,KAAD,CAAhB,CAHM,CAAzB;AAMA,eAAesB,KAAf","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/cartReducers';\nimport { productDetailsReducer, productListReducer } from './reducers/productReducers';\nimport { userRegisterReducer, userSigninReducer } from './reducers/userReducer';\n\nconst initialState = {\n    userSignin: { //em resumo, já verificamos o estado userSignin na largada. se tiver algo em localstorage a gente traz pro estado inicial.\n        userInfo: localStorage.getItem('userInfo')\n        ? JSON.parse(localStorage.getItem('userInfo'))\n        : null,\n    },\n    cart: {\n        cartItems: localStorage.getItem('cartItems')\n        ? JSON.parse(localStorage.getItem('cartItems'))\n        :[],\n    },\n    //isso aqui combinado ao que tá em cartActions é que faz o carrinho ser persistente mesmo com refresh da pagina\n};\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userSignin: userSigninReducer,\n    userRegister: userRegisterReducer,\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducer, \n    initialState, \n    composeEnhancer(applyMiddleware(thunk))\n    );\n\nexport default store;"]},"metadata":{},"sourceType":"module"}